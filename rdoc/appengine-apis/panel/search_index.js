var search_data = {"index":{"searchIndex":["appengine","datastore","blob","bytestring","entity","entitynotfound","error","internalerror","key","link","needindex","query","constants","rollback","text","timeout","toomanyresults","transactionfailed","logger","mail","memcache","invalidvalueerror","memcacheerror","servererror","sdk","testing","urlfetch","downloaderror","http","invalidurlerror","responsetoolargeerror","users","user","logger","time","<<()","<<()","[]()","[]()","[]=()","[]=()","active?()","active_transactions()","add()","add()","add_many()","admin?()","ancestor()","ancestor=()","app_dir()","app_dir=()","auth_domain()","begin_transaction()","boot()","clear()","convert_options()","count()","create_java_message()","create_login_url()","create_logout_url()","current_transaction()","current_user()","decr()","delete()","delete()","delete()","delete_many()","do_nothing()","each()","each()","email()","entity()","fetch()","fetch()","filter()","filter_predicates()","flush_all()","from_path()","get()","get()","get_app_id()","get_hash()","get_property()","has_property()","has_property?()","id_or_name()","incr()","inspect()","install_api_stubs()","install_test_datastore()","install_test_env()","iterator()","java_query()","kind()","load_apiproxy()","load_local_apiproxy_factory()","log()","logged_in?()","merge!()","namespace()","namespace=()","new()","new()","new()","new()","new()","new_from_java()","new_from_java()","new_from_java()","new_from_java()","nickname()","pquery()","push()","put()","raise_errors=()","raise_errors?()","readonly?()","replace()","replace_many()","request()","sdk_path()","send()","send_to_admins()","server_item_stats()","server_malloc_stats()","server_map_stats()","server_reset_stats()","server_size_stats()","server_slab_stats()","server_stats()","servers=()","service()","set()","set_ancestor()","set_many()","set_property()","sort()","sort_predicates()","stats()","to_hash()","to_java()","to_java()","to_java()","to_java()","to_java()","to_s()","transaction()","update()","history.txt","postinstall.txt","readme.rdoc","appengine-apis.rb","apiproxy.rb","datastore.rb","datastore_types.rb","local_boot.rb","logger.rb","mail.rb","memcache.rb","merb-logger.rb","sdk.rb","testing.rb","urlfetch.rb","users.rb"],"longSearchIndex":["users.rb","appengine","datastore","datastore","datastore","datastore","datastore","datastore","datastore","datastore","datastore","datastore","query","datastore","datastore","datastore","datastore","datastore","appengine","appengine","appengine","memcache","memcache","memcache","appengine","appengine","appengine","urlfetch","urlfetch","urlfetch","urlfetch","appengine","users","merb","datastore_types.rb","logger","logger","entity","memcache","entity","memcache","memcache","datastore","logger","memcache","memcache","users","query","query","testing","testing","user","datastore","testing","memcache","query","query","mail","users","users","datastore","users","memcache","datastore","entity","memcache","memcache","memcache","entity","query","user","query","query","urlfetch","query","query","memcache","key","datastore","memcache","testing","memcache","entity","entity","entity","key","memcache","memcache","testing","testing","testing","query","query","query","sdk","sdk","logger","users","entity","memcache","memcache","key","query","logger","memcache","user","blob","link","text","time","user","query","logger","datastore","memcache","memcache","memcache","memcache","memcache","http","sdk","mail","mail","memcache","memcache","memcache","memcache","memcache","memcache","memcache","memcache","memcache","memcache","query","memcache","entity","query","query","memcache","entity","blob","bytestring","link","text","time","key","datastore","entity","files\/history_txt.html","files\/postinstall_txt.html","files\/readme_rdoc.html","files\/lib\/appengine-apis_rb.html","files\/lib\/appengine-apis\/apiproxy_rb.html","files\/lib\/appengine-apis\/datastore_rb.html","files\/lib\/appengine-apis\/datastore_types_rb.html","files\/lib\/appengine-apis\/local_boot_rb.html","files\/lib\/appengine-apis\/logger_rb.html","files\/lib\/appengine-apis\/mail_rb.html","files\/lib\/appengine-apis\/memcache_rb.html","files\/lib\/appengine-apis\/merb-logger_rb.html","files\/lib\/appengine-apis\/sdk_rb.html","files\/lib\/appengine-apis\/testing_rb.html","files\/lib\/appengine-apis\/urlfetch_rb.html","files\/lib\/appengine-apis\/users_rb.html"],"info":[["AppEngine","lib\/appengine-apis\/users.rb","classes\/AppEngine.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",1],["Datastore","AppEngine","classes\/AppEngine\/Datastore.html","","The Datastore provides access to a schema-less data storage system.  The fundamental unit of data in",1],["Blob","AppEngine::Datastore","classes\/AppEngine\/Datastore\/Blob.html"," < String","A blob type, appropriate for storing binary data of any length. Not indexed. ",1],["ByteString","AppEngine::Datastore","classes\/AppEngine\/Datastore\/ByteString.html"," < Blob","A byte-string type, appropriate for storing short amounts of indexed data. This behaves identically to",1],["Entity","AppEngine::Datastore","classes\/AppEngine\/Datastore\/Entity.html"," < Object","Entity is the fundamental unit of data storage.  It has an immutable identifier (contained in the Key)",1],["EntityNotFound","AppEngine::Datastore","classes\/AppEngine\/Datastore\/EntityNotFound.html"," < Error","Raised by #get when the requested entity is not found. ",1],["Error","AppEngine::Datastore","classes\/AppEngine\/Datastore\/Error.html"," < StandardError","Base class of Datastore Errors ",1],["InternalError","AppEngine::Datastore","classes\/AppEngine\/Datastore\/InternalError.html"," < Error","An internal datastore error. Please report this to Google. ",1],["Key","AppEngine::Datastore","classes\/AppEngine\/Datastore\/Key.html"," < Object","The primary key for a datastore entity. A datastore GUID. A Key instance uniquely identifies an entity",1],["Link","AppEngine::Datastore","classes\/AppEngine\/Datastore\/Link.html"," < String","A fully qualified URL. Usually http: scheme, but may also be file:, ftp:, news:, among others. ",1],["NeedIndex","AppEngine::Datastore","classes\/AppEngine\/Datastore\/NeedIndex.html"," < Error","Raised when a query requires a Composite index that does not exist ",1],["Query","AppEngine::Datastore","classes\/AppEngine\/Datastore\/Query.html"," < Object","Query encapsulates a request for zero or more Entity objects out of the datastore.  It supports querying",1],["Constants","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query\/Constants.html","","",1],["Rollback","AppEngine::Datastore","classes\/AppEngine\/Datastore\/Rollback.html"," < Error","May be raised during a call to #transaction to abort and rollback the transaction. Note that *any* exception",1],["Text","AppEngine::Datastore","classes\/AppEngine\/Datastore\/Text.html"," < String","A long string type. Strings of any length can be stored in the datastore using this type. Not indexed.",1],["Timeout","AppEngine::Datastore","classes\/AppEngine\/Datastore\/Timeout.html"," < Error","The datastore operation timed out. This can happen when you attempt to put, get, or delete too many entities",1],["TooManyResults","AppEngine::Datastore","classes\/AppEngine\/Datastore\/TooManyResults.html"," < Error","Raised by Datastore::Query.entity if the query returns more than one entity ",1],["TransactionFailed","AppEngine::Datastore","classes\/AppEngine\/Datastore\/TransactionFailed.html"," < Error","Raised when a transaction could not be committed, usually due to contention. ",1],["Logger","AppEngine","classes\/AppEngine\/Logger.html"," < ::Logger","Replacement for the standard logger.rb. Saves logs to the App Engine Dashboard (or to the java logging",1],["Mail","AppEngine","classes\/AppEngine\/Mail.html","","App Engine applications can send email messages on behalf of the app's administrators, and on behalf",1],["Memcache","AppEngine","classes\/AppEngine\/Memcache.html"," < Object","The Ruby API for the App Engine Memcache service. This offers a fast distrubted cache for commonly-used",1],["InvalidValueError","AppEngine::Memcache","classes\/AppEngine\/Memcache\/InvalidValueError.html"," < MemcacheError","Raised when a cache entry has content, but it cannot be read. For example: - An attempt to #incr a non-integral",1],["MemcacheError","AppEngine::Memcache","classes\/AppEngine\/Memcache\/MemcacheError.html"," < StandardError","Base Memcache exception class ",1],["ServerError","AppEngine::Memcache","classes\/AppEngine\/Memcache\/ServerError.html"," < MemcacheError","An exception for backend non-availability or similar error states which may occur, but are not necessarily",1],["SDK","AppEngine","classes\/AppEngine\/SDK.html","","Helper methods to locate the App Engine SDK and add it to the class path. ",1],["Testing","AppEngine","classes\/AppEngine\/Testing.html","","Local testing support for Google App Engine If you run your code on Google's servers or under dev_appserver,",1],["URLFetch","AppEngine","classes\/AppEngine\/URLFetch.html","","The URLFetch Service provides a way for user code to execute HTTP requests to external URLs. Chunked",1],["DownloadError","AppEngine::URLFetch","classes\/AppEngine\/URLFetch\/DownloadError.html"," < StandardError","Raised if the remote service could not be contacted ",1],["HTTP","AppEngine::URLFetch","classes\/AppEngine\/URLFetch\/HTTP.html"," < Net::HTTP","A subclass of Net::HTTP that makes requests using Google App Engine's URLFetch Service. To replace the",1],["InvalidURLError","AppEngine::URLFetch","classes\/AppEngine\/URLFetch\/InvalidURLError.html"," < StandardError","Raised if the url cannot be parsed. ",1],["ResponseTooLargeError","AppEngine::URLFetch","classes\/AppEngine\/URLFetch\/ResponseTooLargeError.html"," < StandardError","Raised if the response is too large. ",1],["Users","AppEngine","classes\/AppEngine\/Users.html","","Users provides information useful for forcing a user to log in or out, and retrieving information about",1],["User","AppEngine::Users","classes\/AppEngine\/Users\/User.html"," < Object","User represents a specific user, represented by the combination of an email address and a specific Google",1],["Logger","Merb","classes\/Merb\/Logger.html"," < Object","Modifies the Merb Logger class to save logs using the Logging API instead of writing directly to a stream.",1],["Time","lib\/appengine-apis\/datastore_types.rb","classes\/Time.html"," < Object","",1],["<<","AppEngine::Logger","classes\/AppEngine\/Logger.html#M000012","(msg)","",2],["<<","Merb::Logger","classes\/Merb\/Logger.html#M000039","(string = nil)","",2],["[]","AppEngine::Datastore::Entity","classes\/AppEngine\/Datastore\/Entity.html#M000052","(name)","Alias for #get_property",2],["[]","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000057","(*keys)","Alias for #get",2],["[]=","AppEngine::Datastore::Entity","classes\/AppEngine\/Datastore\/Entity.html#M000059","(name, value)","Alias for #set_property",2],["[]=","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000088","(*args)","Syntactic sugar for calling set_many. ",2],["active?","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000038","()","",2],["active_transactions","AppEngine::Datastore","classes\/AppEngine\/Datastore.html#M000021","()","Returns all Transactions started by this thread upon which no attempt to commit or rollback has been",2],["add","AppEngine::Logger","classes\/AppEngine\/Logger.html#M000014","(severity, msg=nil, progname=nil, &block)","",2],["add","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000083","(key, value, expiration=0)","Sets a key's value, iff item is not already in memcache. Args: - key: Key to set. - value: Value to set.",2],["add_many","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000084","(pairs, expiration=0)","Set multiple keys' values iff items are not already in memcache. Args: - pairs: Hash of keys to values,",2],["admin?","AppEngine::Users","classes\/AppEngine\/Users.html#M000115","()","Returns true if the user making this request is an admin for this application, false otherwise. This",2],["ancestor","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000044","()","",2],["ancestor=","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000045","(key)","Sets an ancestor for this query. This restricts the query to only return result entities that are descended",2],["app_dir","AppEngine::Testing","classes\/AppEngine\/Testing.html#M000092","()","The application directory, or '.' if not set. Composite index definitions are written to \"#{app_dir}\/WEB-INF\/\".",2],["app_dir=","AppEngine::Testing","classes\/AppEngine\/Testing.html#M000094","(dir)","Sets the application directory. Should be called before creating stubs. Composite index definitions are",2],["auth_domain","AppEngine::Users::User","classes\/AppEngine\/Users\/User.html#M000126","()","",2],["begin_transaction","AppEngine::Datastore","classes\/AppEngine\/Datastore.html#M000017","()","Begins a transaction agains the datastore. Callers are responsible for explicitly calling #Transaction.commit",2],["boot","AppEngine::Testing","classes\/AppEngine\/Testing.html#M000101","(app_dir=nil)","Loads stub API implementations if no API implementation is currently configured. Sets up a datastore",2],["clear","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000047","()","Alias for #flush_all",2],["convert_options","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000081","(options)","Converts an options hash into FetchOptions. Supported options: [:limit] Maximum number of results the",2],["count","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000064","()","Returns the number of entities that currently match this query. ",2],["create_java_message","AppEngine::Mail","classes\/AppEngine\/Mail.html#M000026","(options)","Creates a Java MailService.Message object. Supported options: [:atttachments] Attachments to send with",2],["create_login_url","AppEngine::Users","classes\/AppEngine\/Users.html#M000109","(url)","Computes the login URL for this request and specified destination URL. Args: - dest_url: The desired",2],["create_logout_url","AppEngine::Users","classes\/AppEngine\/Users.html#M000110","(url)","Computes the logout URL for this request and specified destination URL. Args: - dest_url: String that",2],["current_transaction","AppEngine::Datastore","classes\/AppEngine\/Datastore.html#M000018","(*args)","Returns the current transaction for this thread. The current transaction is defined as the result of",2],["current_user","AppEngine::Users","classes\/AppEngine\/Users.html#M000108","()","If the user is logged in, this method will return a User that contains information about them. Note that",2],["decr","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000098","(key, delta=1)","Atomically fetches, deccrements, and stores a given integral value. \"Integral\" types are Fixnum and in",2],["delete","AppEngine::Datastore","classes\/AppEngine\/Datastore.html#M000009","(*args)","Deletes one or more entities from the datastore. If transaction is specified this operation will execute",2],["delete","AppEngine::Datastore::Entity","classes\/AppEngine\/Datastore\/Entity.html#M000060","(name)","Removes any property with the specified name.  If there is no property with this name set, simply does",2],["delete","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000074","(key, time=nil)","Removes the given key from the cache, and prevents it from being added using #add for +time+ seconds",2],["delete_many","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000077","(keys, time=0)","Removes the given keys from the cache, and prevents them from being added using #add for +time+ seconds",2],["do_nothing","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000107","(*args)","For backwards compatibility. Simply returns nil ",2],["each","AppEngine::Datastore::Entity","classes\/AppEngine\/Datastore\/Entity.html#M000072","()","Iterates over all the properties in this Entity. ",2],["each","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000070","(options={})","Streams the matching entities from the datastore and yields each matching entity. See #convert_options",2],["email","AppEngine::Users::User","classes\/AppEngine\/Users\/User.html#M000127","()","",2],["entity","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000068","()","Retrieves the one and only result for the {@code Query}. Throws TooManyResults if more than one result",2],["fetch","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000076","(options={})","Fetch all matching entities. For large result sets you should prefer #each or #iterator, which stream",2],["fetch","AppEngine::URLFetch","classes\/AppEngine\/URLFetch.html#M000112","(url, options={})","Fetches the given HTTP URL, blocking until the result is returned. Supported options: [:method] GET,",2],["filter","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000055","(name, operator, value)","Add a filter on the specified property. Note that entities with multi-value properties identified by",2],["filter_predicates","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000062","()","Returns an unmodifiable list of the current filter predicates. ",2],["flush_all","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000042","()","Empties the cache of all values. Statistics are not affected. Note that #clear does not respect namespaces",2],["from_path","AppEngine::Datastore::Key","classes\/AppEngine\/Datastore\/Key.html#M000031","(parent_or_kind, kind_or_id, *args)","This is useful when an application wants to use just the 'id' portion of a key in e.g. a URL, where the",2],["get","AppEngine::Datastore","classes\/AppEngine\/Datastore.html#M000002","(*args)","Retrieves one or more entities from the datastore. Retrieves the entity or entities with the given key(s)",2],["get","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000053","(*keys)","Fetch and return the values associated with the given +key+s from the cache. Returns +nil+ for any value",2],["get_app_id","AppEngine::Testing","classes\/AppEngine\/Testing.html#M000105","(app_dir)","Looks for app.yaml or WEB-INF\/appengine-web.xml in +app_dir+ and parses the application id. ",2],["get_hash","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000065","(*keys)","Looks up multiple keys from memcache in one operation. This is more efficient than multiple separate",2],["get_property","AppEngine::Datastore::Entity","classes\/AppEngine\/Datastore\/Entity.html#M000051","(name)","Returns the property with the specified name. ",2],["has_property","AppEngine::Datastore::Entity","classes\/AppEngine\/Datastore\/Entity.html#M000067","(name)","Alias for #has_property?",2],["has_property?","AppEngine::Datastore::Entity","classes\/AppEngine\/Datastore\/Entity.html#M000066","(name)","Returns true if a property has been set. This function can be used to test if a property has been specifically",2],["id_or_name","AppEngine::Datastore::Key","classes\/AppEngine\/Datastore\/Key.html#M000029","()","",2],["incr","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000096","(key, delta=1)","Atomically fetches, increments, and stores a given integral value. \"Integral\" types are Fixnum and in",2],["inspect","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000103","()","",2],["install_api_stubs","AppEngine::Testing","classes\/AppEngine\/Testing.html#M000097","()","Install stub apis. The datastore will be written to the disk inside #app_dir. You could potentially use",2],["install_test_datastore","AppEngine::Testing","classes\/AppEngine\/Testing.html#M000095","()","Install stub apis and force all datastore operations to use an in-memory datastore. You may call this",2],["install_test_env","AppEngine::Testing","classes\/AppEngine\/Testing.html#M000089","()","Install a test environment for the current thread. You must call this before making any api calls. Note",2],["iterator","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000075","(options={})","Returns an Enumerable over the matching entities. See #convert_options for supported options ",2],["java_query","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000080","()","Returns a Java.ComGoogleAppengineApiDatastore.Query for this query. ",2],["kind","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000043","()","",2],["load_apiproxy","AppEngine::SDK","classes\/AppEngine\/SDK.html#M000046","()","Tries to load the ApiProxy class. ",2],["load_local_apiproxy_factory","AppEngine::SDK","classes\/AppEngine\/SDK.html#M000050","()","Tries to load the ApiProxyLocalFactory class. ",2],["log","AppEngine::Logger","classes\/AppEngine\/Logger.html#M000019","(severity, msg=nil, progname=nil, &block)","Alias for #add",2],["logged_in?","AppEngine::Users","classes\/AppEngine\/Users.html#M000114","()","Returns true if there is a user logged in, false otherwise. ",2],["merge!","AppEngine::Datastore::Entity","classes\/AppEngine\/Datastore\/Entity.html#M000071","(other)","Alias for #update",2],["namespace","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000099","()","Get the name of the namespace that will be used in API calls. ",2],["namespace=","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000100","(value)","Change the namespace used in API calls. ",2],["new","AppEngine::Datastore::Key","classes\/AppEngine\/Datastore\/Key.html#M000030","(encoded)","Creates a new Key from an encoded String. ",2],["new","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000041","(*args)","Creates a new Query with the specified kind and\/or ancestor. Args: - kind: String. Only return entities",2],["new","AppEngine::Logger","classes\/AppEngine\/Logger.html#M000011","(*args)","",2],["new","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000036","(*servers)","",2],["new","AppEngine::Users::User","classes\/AppEngine\/Users\/User.html#M000123","(email, auth_domain)","Creates a new User. Args: - email: a non-nil email address. - auth_domain: a non-nil domain name into",2],["new_from_java","AppEngine::Datastore::Blob","classes\/AppEngine\/Datastore\/Blob.html#M000016","(blob)","",2],["new_from_java","AppEngine::Datastore::Link","classes\/AppEngine\/Datastore\/Link.html#M000025","(link)","",2],["new_from_java","AppEngine::Datastore::Text","classes\/AppEngine\/Datastore\/Text.html#M000010","(text)","",2],["new_from_java","Time","classes\/Time.html#M000001","(date)","",2],["nickname","AppEngine::Users::User","classes\/AppEngine\/Users\/User.html#M000125","()","Return this user's nickname. The nickname will be a unique, human readable identifier for this user with",2],["pquery","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000079","()","Returns a Java.ComGoogleAppengineApiDatastore.PreparedQuery for this query. ",2],["push","Merb::Logger","classes\/Merb\/Logger.html#M000040","(string = nil)","Alias for #<<",2],["put","AppEngine::Datastore","classes\/AppEngine\/Datastore.html#M000007","(*args)","Store one or more entities in the datastore. The entities may be new or previously existing. For new",2],["raise_errors=","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000106","(should_raise)","Set whether this client raises an exception if there's an error contacting the server. If +should_raise+",2],["raise_errors?","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000104","()","Returns whether the client raises an exception if there's an error contacting the server. By default",2],["readonly?","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000102","()","Returns true if the cache was created read-only. ",2],["replace","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000090","(key, value, expiration=0)","Replaces a key's value, failing if item isn't already in memcache. Unlike #add and #replace, this method",2],["replace_many","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000093","(pairs, expiration=0)","Replace multiple keys' values, failing if the items aren't in memcache. Args: - pairs: Hash of keys to",2],["request","AppEngine::URLFetch::HTTP","classes\/AppEngine\/URLFetch\/HTTP.html#M000138","(req, body=nil, &block)","",2],["sdk_path","AppEngine::SDK","classes\/AppEngine\/SDK.html#M000061","(*pieces)","Tries to find the Google App Engine SDK for Java. Looks for appcfg.sh in these directories (in order):",2],["send","AppEngine::Mail","classes\/AppEngine\/Mail.html#M000015","(sender, to, subject, text, options={})","Sends an email. The message will be delivered asynchronously, and delivery problems will result in a",2],["send_to_admins","AppEngine::Mail","classes\/AppEngine\/Mail.html#M000022","(sender, subject, text, options={})","Sends an email alert to all admins of an application. The message will be delivered asynchronously, and",2],["server_item_stats","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000111","(*args)","Alias for #do_nothing",2],["server_malloc_stats","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000113","(*args)","Alias for #do_nothing",2],["server_map_stats","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000116","(*args)","Alias for #do_nothing",2],["server_reset_stats","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000117","(*args)","Alias for #do_nothing",2],["server_size_stats","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000118","(*args)","Alias for #do_nothing",2],["server_slab_stats","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000119","(*args)","Alias for #do_nothing",2],["server_stats","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000120","(*args)","Alias for #do_nothing",2],["servers=","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000121","(*args)","Alias for #do_nothing",2],["service","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000037","()","Returns the Java MemcacheService object used by this Memcache client. ",2],["set","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000085","(key, value, expiration=0)","Sets a key's value, regardless of previous contents in cache. Unlike #add and #replace, this method always",2],["set_ancestor","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000049","(key)","Sets an ancestor for this query. This restricts the query to only return result entities that are descended",2],["set_many","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000087","(pairs, expiration=0)","Set multiple keys' values at once, regardless of previous contents. Args: - pairs: Hash of keys to values,",2],["set_property","AppEngine::Datastore::Entity","classes\/AppEngine\/Datastore\/Entity.html#M000054","(name, value)","Sets the property named, +name+, to +value+. As the value is stored in the datastore, it is converted",2],["sort","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000058","(name, direction=ASCENDING)","Specify how the query results should be sorted. The first call to #sort will register the property that",2],["sort_predicates","AppEngine::Datastore::Query","classes\/AppEngine\/Datastore\/Query.html#M000063","()","Returns an unmodifiable list of the current sort predicates. ",2],["stats","AppEngine::Memcache","classes\/AppEngine\/Memcache.html#M000048","()","Gets memcache statistics for this application. All of these statistics may reset due to various transient",2],["to_hash","AppEngine::Datastore::Entity","classes\/AppEngine\/Datastore\/Entity.html#M000073","()","",2],["to_java","AppEngine::Datastore::Blob","classes\/AppEngine\/Datastore\/Blob.html#M000013","()","",2],["to_java","AppEngine::Datastore::ByteString","classes\/AppEngine\/Datastore\/ByteString.html#M000018","()","",2],["to_java","AppEngine::Datastore::Link","classes\/AppEngine\/Datastore\/Link.html#M000023","()","",2],["to_java","AppEngine::Datastore::Text","classes\/AppEngine\/Datastore\/Text.html#M000008","()","",2],["to_java","Time","classes\/Time.html#M000000","()","",2],["to_s","AppEngine::Datastore::Key","classes\/AppEngine\/Datastore\/Key.html#M000027","()","Converts a Key into a websafe string.  For example, this string can safely be used as an URL parameter",2],["transaction","AppEngine::Datastore","classes\/AppEngine\/Datastore.html#M000024","(retries=0)","Runs the block inside a transaction. Every #get, #put, and #delete call in the block is made within the",2],["update","AppEngine::Datastore::Entity","classes\/AppEngine\/Datastore\/Entity.html#M000069","(other)","Add the properties from +other+ to this Entity. Other may be an Entity or Hash ",2],["History.txt","files\/History_txt.html","files\/History_txt.html","","== 0.0.3 2009-04-25  * Added Memcache and Mail APIs * Tries to automatically add SDK to your classpath",3],["PostInstall.txt","files\/PostInstall_txt.html","files\/PostInstall_txt.html",""," To use the local datastore you need to have the Google App Engine SDK for Java installed (http:\/\/code.google.com\/appengine\/docs\/java\/gettingstarted\/installing.html).",3],["README.rdoc","files\/README_rdoc.html","files\/README_rdoc.html","","= appengine-apis  * http:\/\/code.google.com\/p\/appengine-jruby  == DESCRIPTION:  APIs and utilities for",3],["appengine-apis.rb","files\/lib\/appengine-apis_rb.html","files\/lib\/appengine-apis_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["apiproxy.rb","files\/lib\/appengine-apis\/apiproxy_rb.html","files\/lib\/appengine-apis\/apiproxy_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["datastore.rb","files\/lib\/appengine-apis\/datastore_rb.html","files\/lib\/appengine-apis\/datastore_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["datastore_types.rb","files\/lib\/appengine-apis\/datastore_types_rb.html","files\/lib\/appengine-apis\/datastore_types_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["local_boot.rb","files\/lib\/appengine-apis\/local_boot_rb.html","files\/lib\/appengine-apis\/local_boot_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["logger.rb","files\/lib\/appengine-apis\/logger_rb.html","files\/lib\/appengine-apis\/logger_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["mail.rb","files\/lib\/appengine-apis\/mail_rb.html","files\/lib\/appengine-apis\/mail_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["memcache.rb","files\/lib\/appengine-apis\/memcache_rb.html","files\/lib\/appengine-apis\/memcache_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["merb-logger.rb","files\/lib\/appengine-apis\/merb-logger_rb.html","files\/lib\/appengine-apis\/merb-logger_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["sdk.rb","files\/lib\/appengine-apis\/sdk_rb.html","files\/lib\/appengine-apis\/sdk_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["testing.rb","files\/lib\/appengine-apis\/testing_rb.html","files\/lib\/appengine-apis\/testing_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["urlfetch.rb","files\/lib\/appengine-apis\/urlfetch_rb.html","files\/lib\/appengine-apis\/urlfetch_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["users.rb","files\/lib\/appengine-apis\/users_rb.html","files\/lib\/appengine-apis\/users_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3]]}}